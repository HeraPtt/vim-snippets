# functions
# function
snippet fun "function"
	function ${1:function_name}(${2}) {
		${0:visual}
	}
# anonymous function
snippet funa "" w
	function(${1}) {
		${0:visual}
	}
# anonymous function assigned to variable
snippet funa.v
	var ${1:function_name} = function(${2}) {
		${0:visual}
	};
# function assigned to variable
snippet fun.v
	var ${1:function_name} = function $1(${2}) {
		${0:visual}
	};
# Flow control
# if
snippet if "if (condition) { ... }"
	if (${1:true}) {
		${2:VISUAL}
	}$0

snippet el "else { ... }"
	else {
		${1:VISUAL}
	}$0

snippet elif "else if (condition) { ... }"
	else if (${1:true}) {
		${2:VISUAL}
	}$0

# if ... else
snippet ife "if (condition) { ... } else { ... }"
	if (${1:true}) {
		${2:VISUAL}
	} else {
		${3:VISUAL}
	}$0
# tertiary conditional
snippet ter Ternary: `condition ? true : false`
	$1 ? $2: $0
# switch
snippet switch
	switch (${1:expression}) {
		$2
		default:
			${3}
	}$0
snippet cs "case 'xyz': ... break"
	case ${1:condition}:
		${2:VISUAL}
		break;$0
snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	}
snippet tryf "try { ... } catch(e) { ... } finally { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	} finally {
		${3:/* be executed regardless of the try / catch result*/}
	}
# throw Error
snippet terr
	throw new Error('${1:error message}')
# return
snippet ret
	return ${0:result};
snippet for "for (...) {...}"
	for (let ${1:i} = ${2:0}, ${3:len} = ${4:Things.length}; $1 < ${5:len}; $1++) {
		${6:VISUAL}
	}$0
snippet wh "(condition) { ... }"
	while (${1:true}) {
		${2:VISUAL}
	}$0
snippet do "do { ... } while (condition)"
	do {
		${0:${VISUAL}}
	} while ($1);
# For in loop
snippet fori
	for (let ${1:key} in ${2:obj}) {
		${3:VISUAL}
	}$0
# Objects
snippet cl "console.log"
	console.log(${0});
snippet cd "console.debug"
	console.debug(${0});
snippet ce "console.error"
	console.error(${0});
snippet cw "console.warn"
	console.warn(${0});
snippet ci "console.info"
	console.info(${0});
snippet ct "console.trace"
	console.trace(${0:label});
snippet ctime "console.time ... console.timeEnd"
	console.time("${1:label}");
	${0:${VISUAL}}
	console.timeEnd("$1");
snippet ctimestamp "console.timeStamp"
	console.timeStamp("${1:label}");
snippet ca "console.assert"
	console.assert(${1:expression}, ${0:obj});
snippet cclear "console.clear"
	console.clear();
snippet cdir "console.dir"
	console.dir(${0:obj});
snippet cdirx "console.dirxml"
	console.dirxml(${1:object});
snippet cgroup "console.group"
	console.group("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();
snippet cgroupc "console.groupCollapsed"
	console.groupCollapsed("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();
snippet cprof "console.profile"
	console.profile("${1:label}");
	${0:${VISUAL}}
	console.profileEnd();
snippet ctable "console.table"
	console.table(${1:"${2:value}"});
snippet clstr "console.log stringified"
	console.log(JSON.stringify(${0}, null, 2));
# Misc
snippet us
	'use strict';
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
snippet const
	const ${1} = ${0};
snippet constn
	const ${1} = new ${0};
snippet let
	let ${1} = ${0};
snippet im "import xyz from 'xyz'"
	import ${1} from '${2:$1}';
snippet imas "import * as xyz from 'xyz'"
	import * as ${1} from '${2:$1}';
snippet imm "import { member } from 'xyz'"
	import { ${1} } from '${2}';
snippet cla
	class ${1} {
		${0:${VISUAL}}
	}
snippet clax
	class ${1} extends ${2} {
		${0:${VISUAL}}
	}
snippet clac
	class ${1} {
		constructor(${2}) {
			${0:${VISUAL}}
		}
	}
snippet =>
	(${1}) => {
		${0:${VISUAL}}
	}
snippet =>path
	("${1}", (${2:req, res}) => {
		${0:${VISUAL}}
	})
snippet region
	// #region ${1}
		${2}
	// #endregion ${1}
	${0}
snippet separator-begin
	---------------${1} begin---------------
snippet separator-end
	---------------${1} end-----------------
